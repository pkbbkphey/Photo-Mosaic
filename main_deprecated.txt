//=======================================================================================================
//----------------------------  'add bitfield with order' revision  -------------------------------------
//=======================================================================================================

// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv  Demostrate bit field filter  vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    // some bit field filter design driven code here
    //  TEST FOR GRAYSCALE FILTERS
    photo_filter filter;
    Image *img0 = new GrayImage();
    /*img0->LoadImage("Image-Folder/lena.jpg");
    img0->DumpImage("Image-Folder/results/a0.jpg");
    img0->Display_X_Server();

    filter.apply(img0->get_grayPixels(), img0->get_width(), img0->get_height(), 0b00001100);
    img0->DumpImage("Image-Folder/results/a1.jpg");
    img0->Display_X_Server();

    img0->LoadImage("Image-Folder/lena.jpg");
    filter.apply(img0->get_grayPixels(), img0->get_width(), img0->get_height(), filter.BOX | filter.SOBEL);
    img0->DumpImage("Image-Folder/results/a2.jpg");
    img0->Display_X_Server();

    img0->LoadImage("Image-Folder/noise.jpg");
    filter.apply(img0->get_grayPixels(), img0->get_width(), img0->get_height(), filter.MEDIAN);
    img0->DumpImage("Image-Folder/results/a3.jpg");
    img0->Display_X_Server();*/

    img0->LoadImage("Image-Folder/lena.jpg");
    img0->Display_X_Server();

    filter.apply_order(img0->get_grayPixels(), img0->get_width(), img0->get_height(), 10200);
    img0->DumpImage("Image-Folder/results/a4.jpg");
    img0->Display_X_Server();

    img0->LoadImage("Image-Folder/lena.jpg");
    filter.apply_order(img0->get_grayPixels(), img0->get_width(), img0->get_height(), 10230);
    img0->DumpImage("Image-Folder/results/a5.jpg");
    img0->Display_X_Server();


    //  TEST FOR RGB FILTERS
    Image *img1 = new RGBImage();
    /*img1->LoadImage("Image-Folder/lena.jpg");
    img1->DumpImage("Image-Folder/results/b0.jpg");
    img1->Display_X_Server();

    filter.apply(img1->get_rgbPixels(), img1->get_width(), img1->get_height(), 0b00001100);
    img1->DumpImage("Image-Folder/results/b1.jpg");
    img1->Display_X_Server();

    img1->LoadImage("Image-Folder/lena.jpg");
    filter.apply(img1->get_rgbPixels(), img1->get_width(), img1->get_height(), filter.BOX | filter.SOBEL);
    img1->DumpImage("Image-Folder/results/b2.jpg");
    img1->Display_X_Server();

    img1->LoadImage("Image-Folder/noise.jpg");
    filter.apply(img1->get_rgbPixels(), img1->get_width(), img1->get_height(), filter.MEDIAN);
    img1->DumpImage("Image-Folder/results/b3.jpg");
    img1->Display_X_Server();*/

    img1->LoadImage("Image-Folder/lena.jpg");
    img1->Display_X_Server();

    filter.apply_order(img1->get_rgbPixels(), img1->get_width(), img1->get_height(), 2010);
    img1->DumpImage("Image-Folder/results/b4.jpg");
    img1->Display_X_Server();

    img1->LoadImage("Image-Folder/lena.jpg");
    filter.apply_order(img1->get_rgbPixels(), img1->get_width(), img1->get_height(), 1020);
    img1->DumpImage("Image-Folder/results/b5.jpg");
    img1->Display_X_Server();

// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


//=======================================================================================================
//---------------------------------------  denoise failed  ----------------------------------------------
//=======================================================================================================
void photo_filter::applyDenoise(int** pixels1, int** pixels2, int w, int h) {
    // Define a kernel size for median filtering
    int kernelSize = 7;

    // Iterate over each pixel in the image
    for (int y = 0; y < h; ++y) {
        for (int x = 0; x < w; ++x) {
            // If the pixel is on the contour line (pixels2 close to 255), use the original value
            if(pixels2[y][x] > 245) continue;
            if(pixels2[y][x] > 127) kernelSize = 3;
            else kernelSize = 7;

            // Temporary storage for median filtering
            std::vector<int> values(kernelSize * kernelSize);

            // Apply median filtering for pixels not on the contour line
            int count = 0;
            for (int ky = -kernelSize / 2; ky <= kernelSize / 2; ++ky) {
                for (int kx = -kernelSize / 2; kx <= kernelSize / 2; ++kx) {
                    int ny = std::max(0, std::min(h - 1, y + ky));
                    int nx = std::max(0, std::min(w - 1, x + kx));
                    values[count++] = pixels1[ny][nx];
                }
            }
            // Sort the values to find the median
            std::sort(values.begin(), values.end());
            // Assign the median value to the current pixel
            pixels1[y][x] = values[count / 2];
        }
    }
}